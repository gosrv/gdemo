package entity

import (
	"github.com/golang/protobuf/proto"
    "github.com/gosrv/gbase/datasync"
    "github.com/gosrv/gcluster/gcluster/proto"
)

{{- define "ContainerImpl"}}
type ItemIter{{.msgType.Name}}{{.msgField.Name}} func(k {{.keyType}}, v {{.valType}})
type ItemStatusIter{{.msgType.Name}}{{.msgField.Name}} func(k {{.keyType}}, v {{.valType}}, dirty bool)
    
type Container{{.msgType.Name}}{{.msgField.Name}} struct {
    _impl {{.implType}}
}
func (this *Container{{.msgType.Name}}{{.msgField.Name}})Get(key {{.keyType}}) {{.valType}} {
    return this._impl.Get(key).({{.valType}})
}
func (this *Container{{.msgType.Name}}{{.msgField.Name}})Set(key {{.keyType}}, value {{.valType}}) {
    this._impl.Set(key, value)
}
func (this *Container{{.msgType.Name}}{{.msgField.Name}})Foreach(iter ItemIter{{.msgType.Name}}{{.msgField.Name}}) {
    this._impl.Foreach(func(k interface{}, v interface{}) {iter(k.({{.keyType}}), v.({{.valType}}))})
}
func (this *Container{{.msgType.Name}}{{.msgField.Name}})ForeachStatus(iter ItemStatusIter{{.msgType.Name}}{{.msgField.Name}}) {
    this._impl.ForeachStatus(func(k interface{}, v interface{}, dirty bool) {iter(k.({{.keyType}}), v.({{.valType}}), dirty)})
}
func (this *Container{{.msgType.Name}}{{.msgField.Name}})ForeachDirty(iter ItemIter{{.msgType.Name}}{{.msgField.Name}}) {
    this._impl.ForeachDirty(func(k interface{}, v interface{}) {iter(k.({{.keyType}}), v.({{.valType}}))})
}
func (this *Container{{.msgType.Name}}{{.msgField.Name}})Size() int {
    return this._impl.Size()
}
func (this *Container{{.msgType.Name}}{{.msgField.Name}})Clear() {
    this._impl.Clear()
}

func New{{.msgType.Name}}{{.msgField.Name}}Proto(k {{.keyType}}, v {{.valType}}) *netproto.{{.msgType.Name}}{{.msgField.Name}} {
    {{- if .isValPriType}}
        return &netproto.{{.msgType.Name}}{{.msgField.Name}}{
            Key:&k,
            Val:&v,
        }
    {{- else}}
        return &netproto.{{.msgType.Name}}{{.msgField.Name}}{
            Key:&k,
            Val:v.ToProto(),
        }
    {{- end}}
}

func New{{.msgType.Name}}{{.msgField.Name}}ProtoDirty(k {{.keyType}}, v {{.valType}}) *netproto.{{.msgType.Name}}{{.msgField.Name}} {
    {{- if .isValPriType}}
        return &netproto.{{.msgType.Name}}{{.msgField.Name}}{
            Key:&k,
            Val:&v,
        }
    {{- else}}
        return &netproto.{{.msgType.Name}}{{.msgField.Name}}{
            Key:&k,
            Val:v.ToProtoDirty(),
        }
    {{- end}}
}

{{- end}}

{{- range $KT, $msgType := .MessageType}}
    {{- range $KF, $msgField := .Field -}}
        {{- if isMap $ $msgField}}
            {{$dict := dict "msgType" $msgType "msgField" $msgField "keyType" (mapKey $ $msgField | goType) "valType" (mapVal $ $msgField | goType) "implType" "*datasync.DirtyContainerMap" "isValPriType" (mapVal $ $msgField | isPrimitive)}}
            {{template "ContainerImpl" $dict}}
        {{- else if isRepeated $msgField}}
            {{$dict := dict "msgType" $msgType "msgField" $msgField "keyType" "int32" "valType" (goType $msgField | trimPrefix "[]" ) "implType" "*datasync.DirtyContainerVector" "isValPriType" (isPrimitive $msgField)}}
                {{template "ContainerImpl" $dict}}
            {{- end}}
    {{- end}}
{{- end}}

{{range $KT, $msgType := .MessageType}}
    type {{$msgType.Name}} struct {
        *datasync.DirtyContainerMarkVector
        {{- range $KF, $msgField := .Field -}}
            {{- if isMap $ $msgField}}
                _{{$msgField.Name}} *Container{{$msgType.Name}}{{$msgField.Name}}
            {{- else if isRepeated $msgField}}
                _{{$msgField.Name}} *Container{{$msgType.Name}}{{$msgField.Name}}
            {{- else}}
                _{{$msgField.Name}} {{goType $msgField}}
            {{- end}}
        {{- end}}
    }
    // ctor
    func New{{$msgType.Name}}() *{{$msgType.Name}} {
        ins := &{{$msgType.Name}} {
            DirtyContainerMarkVector:datasync.NewDirtyContainerMarkVector(),
        }
        {{- range $KF, $msgField := .Field}}  
            {{- if isMap $ $msgField}}
                ins._{{$msgField.Name}} = &Container{{$msgType.Name}}{{$msgField.Name}} {
                    _impl : datasync.NewDirtyContainerMap(),
                }
                ins._{{$msgField.Name}}._impl.Init(ins, {{$msgField.Number}})
            {{- else if isRepeated $msgField}}
                ins._{{$msgField.Name}} = &Container{{$msgType.Name}}{{$msgField.Name}} {
                    _impl : datasync.NewDirtyContainerVector(),
                }
                ins._{{$msgField.Name}}._impl.Init(ins, {{$msgField.Number}})
            {{- else if  isPrimitive $msgField | not}}
                ins._{{$msgField.Name}} = New{{protoType $msgField}}()
                ins._{{$msgField.Name}}.Init(ins, {{$msgField.Number}})
            {{- end}}
        {{- end}}
        return ins
    }


    {{- range $KF, $msgField := .Field}}
// {{camelcase $msgField.Name}} getter and setter     
        {{- if isMap $ $msgField}}
            func (this *{{$msgType.Name}})Get{{camelcase $msgField.Name}}() *Container{{$msgType.Name}}{{$msgField.Name}} {
                return this._{{$msgField.Name}}
            }
        {{- else if isRepeated $msgField}}
            func (this *{{$msgType.Name}})Get{{camelcase $msgField.Name}}() *Container{{$msgType.Name}}{{$msgField.Name}} {
                return this._{{$msgField.Name}}
            }
        {{- else if isPrimitive $msgField}}
            func (this *{{$msgType.Name}})Get{{camelcase $msgField.Name}}() {{goType $msgField}} {
                return this._{{$msgField.Name}}
            }
            func (this *{{$msgType.Name}})Set{{camelcase $msgField.Name}}(val {{goType $msgField}}) {
                this._{{$msgField.Name}} = val
                this.MarkDirtyUp({{$msgField.Number}})
            }
        {{- else}}
            func (this *{{$msgType.Name}})Get{{camelcase $msgField.Name}}() {{goType $msgField}} {
                return this._{{$msgField.Name}}
            }
        {{- end}}
    {{- end}}

// read from proto    
func (this *{{$msgType.Name}})FromProto(pdata *netproto.{{$msgType.Name}}) {
    {{- range $KF, $msgField := .Field}}
        // {{camelcase $msgField.Name}} getter and setter     
        {{- if isRepeated $msgField}}
            {{- if isPrimitive $msgField}}
                for _,val := range pdata.{{camelcase $msgField.Name}} {
                    this._{{$msgField.Name}}.Set(*val.Key, *val.Val)
                }
            {{- else if isMap $ $msgField}}
                for _,val := range pdata.{{camelcase $msgField.Name}} {
                    {{- if mapVal $ $msgField | isPrimitive}}
                        this._{{$msgField.Name}}.Set(*val.Key, *val.Val)
                    {{- else}}
                        ele := New{{mapVal $ $msgField | protoType}}()
                        ele.FromProto(val.Val)
                        this._{{$msgField.Name}}.Set(*val.Key, ele)
                    {{- end}}
                }
            {{- else}}   
                for _,val := range pdata.{{camelcase $msgField.Name}} {
                    ele := New{{protoType $msgField}}()
                    ele.FromProto(val.Val)
                    this._{{$msgField.Name}}.Set(*val.Key, ele)
                }
            {{- end}}
        {{- else if isPrimitive $msgField}}
            if pdata.{{camelcase $msgField.Name}} != nil {
                this.Set{{camelcase $msgField.Name}}(*pdata.{{camelcase $msgField.Name}})
            }
        {{- else}} 
            if pdata.{{camelcase $msgField.Name}} != nil {
                this.Get{{camelcase $msgField.Name}}().FromProto(pdata.{{camelcase $msgField.Name}})
            }
        {{- end}}
    {{- end}}
}

// write to proto    
func (this *{{$msgType.Name}})ToProto() *netproto.{{$msgType.Name}} {
    pdata := &netproto.{{$msgType.Name}}{}
    {{- range $KF, $msgField := .Field}}
    {{- if isMap $ $msgField}}
        this._{{$msgField.Name}}.Foreach(func (k {{mapKey $ $msgField | goType}}, v {{mapVal $ $msgField | goType}}) {
            pdata.{{camelcase $msgField.Name}} = append(pdata.{{camelcase $msgField.Name}}, New{{$msgType.Name}}{{$msgField.Name}}Proto(k,v))
            })
    {{- else if isRepeated $msgField}}
        this._{{$msgField.Name}}.Foreach(func (k int32, v {{$msgField | goType | trimPrefix "[]"}}) {
            pdata.{{camelcase $msgField.Name}} = append(pdata.{{camelcase $msgField.Name}}, New{{$msgType.Name}}{{$msgField.Name}}Proto(k,v))
        })
    {{- else if isPrimitive $msgField}}
        pdata.{{camelcase $msgField.Name}} = proto.{{goType $msgField | camelcase}}(this._{{$msgField.Name}})
    {{- else}}
        pdata.{{camelcase $msgField.Name}} = this._{{$msgField.Name}}.ToProto()
    {{- end}}
    {{- end}}
    return pdata
}

// write dirty to proto
func (this *{{$msgType.Name}})ToProtoDirty() *netproto.{{$msgType.Name}} {
    if (this.IsAllDirty()) {
        return this.ToProto()
    }
    pdata := &netproto.{{$msgType.Name}}{}
    {{- range $KF, $msgField := .Field}}
    if this.IsDirty({{$msgField.Number}}) {
        {{- if isMap $ $msgField}}
            this._{{$msgField.Name}}.ForeachDirty(func (k {{mapKey $ $msgField | goType}}, v {{mapVal $ $msgField | goType}}) {
                    pdata.{{camelcase $msgField.Name}} = append(pdata.{{camelcase $msgField.Name}}, New{{$msgType.Name}}{{$msgField.Name}}ProtoDirty(k,v))
                    })
        {{- else if isRepeated $msgField}}
            this._{{$msgField.Name}}.ForeachDirty(func (k int32, v {{$msgField | goType | trimPrefix "[]"}}) {
                    pdata.{{camelcase $msgField.Name}} = append(pdata.{{camelcase $msgField.Name}}, New{{$msgType.Name}}{{$msgField.Name}}ProtoDirty(k,v))
                })
        {{- else if isPrimitive $msgField}}
            pdata.{{camelcase $msgField.Name}} = proto.{{goType $msgField | camelcase}}(this._{{$msgField.Name}})
        {{- else}}
            pdata.{{camelcase $msgField.Name}} = this._{{$msgField.Name}}.ToProtoDirty()
        {{- end}}
    }
    {{- end}}
    return pdata
}
{{- end}}